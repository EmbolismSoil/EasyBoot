1 可以在用户界面下使用命令添加或者替换板子上的设备：具体实现是重载板子结构体上的
链表成员。
2 可以查看目前系统内支持的驱动信息：具体实现就是提供一个函数，显示出每个设备或者板子的私有信息。
3 用户可以在任意的.c文件内添加设备。具体实现是：使用UBOOT命令添加机制。划分出来一个device段，用于存放设备对象。系统启动后调用device_main函数，用户在这个函数内往板子上注册自己需要的设备，即可使用。

驱动具体实现需要仔细考虑周全，如何添加如何使用？（试着假设自己是用户，如何开发一款驱动）。会有什么影响吗？

开发驱动的流程：

1 在自己驱动的.c文件中实现自己的ops结构体，使用EXPORT_DRIVER(__type,__ops)添加一个驱动，这个驱动会被添加到.driver这个section内，设备对象名为__driver_##__type,其型号就是并且自动初始化：__driver_##__type = {.type = #__type, .ops = __ops};

2 接下来，用户就在device_main函数内，调用get_board()函数，获取一个板子，然后调用register_device(board,drv_type,device_type)注册一个设备，这个设备使用驱动drv_type,以后在系统中以device_type代表着驱动的存在，这个函数会遍历.driver section，找到相对应的型号，然后添加到板子上对应的链表上。

3 在第二版中加入总线（仿照LINUX设备驱动模型和IIC总线）
   简单的实现方式 看看I2C适配器

